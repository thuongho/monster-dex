npx create-react-app <app-name>
- npx will scaffold all the necessary dependencies to start a react app

A good rule of thumb as to when to use the key attribute is this: Anytime you use the map() function inside of render, or you have a list of the same jsx elements one after another, they need a key attribute

key is used by React to render multiple components
- it updates the dom only the component that needs to update

life cycle method
- methods called at diff stages at when the component gets rendered

any attribute inside custom tag is props
anything inside custom tags are children

state turns into props
- state usually live in only one location

setState is asynchronous

whenever setState gets called, render gets re-rendered
- don't setState in render

babel transpile jsx down to js for older browser

place state at top so that it one way go down to children

arrow function auto bind this to App Class or when handleChange was first defined
lexical scoping - lexically scope this to when method was first defined which is App component

use arrow function on any class methods you define that are not part of react (render, componentDidMount)

to deploy to github pages
1. yarn add gh-pages
- add github pages
2. add homepage to package.json
- "homepage": "https://thuongho.github.io/monsters-dex"
3. add predeploy and deploy
- "predeploy": "yarn build",
- "deploy": "gh-pages -d build"
4. run yarn deploy
5. ggpush
6. go to github repo > settings > make sure source is pointed to gh-pages branch

npm and yarn knows to run any script with pre before the actual script
- predeploy > deploy

zsh ggpush
- git push origin master

unpkg.org to get react library in script

updating dependencies
yarn list react react-dom react-scripts
- shows latest
^ - update to latest minor version without breaking change
yarn upgrade

npm audit fix 
- fix security vulnerability
- yarn u have to update each depeencies seperately as there is no easy method to fix the vulnerabilities

more tools > rendering > paint flashing
- shows the dom element that will be rendered in green

whenever you want to update state using setState and there is prop and state
- use function instead of passing in a parameter
(prevState, prevProps) => return {state object update like data: []}

componentDidMount
- api calls

componentDidUpdate
- updating phase
- new props
- change state

shouldComponentUpdate(nextProps, nextState)
- sits between updating props, states
- like ngChange
- return false will cause it to not re-render the component

componentWillUnmount
- perform before stripping the component
- clean up component
- remove anything that might be memory leak

3 things that make a good React developer
Decide on components
Decide the State and where it lives
What changes when state changes
