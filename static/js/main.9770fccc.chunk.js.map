{"version":3,"sources":["components/card-list/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/scroll/scroll.jsx","components/error-boundary/error-boundary.jsx","containers/App.js","actions.js","constants.js","reducer.js","serviceWorker.js","index.js"],"names":["Card","monster","id","name","email","className","alt","src","CardList","props","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","searchField","onSearchChange","robots","isPending","filteredMonsters","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialState","initialStateRobots","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9770fccc.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\n// export const Card = (props) => (\n//   <div className=\"card-container\">\n//     <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n//     <h2>{ props.monster.name }</h2>\n//     <p>{ props.monster.email }</p>\n//   </div>\n// );\n\nconst Card = ({ monster }) => {\n  const {id, name, email } = monster;\n  return(\n    <div className=\"card-container\">\n      <img alt=\"monster\" src={`https://robohash.org/${id}?set=set2&size=180x180`} />\n      <h2>{ name }</h2>\n      <p>{ email }</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './card-list.styles.css';\nimport Card from './card/card.component';\n\nconst CardList = props => {\n  // test ErrorBoundary\n  // if (true) {\n  //   throw new Error('NOooooo!');\n  // }\n  return (\n  // console.log('props', props);\n  // children\n  // return (<div className=\"card-list\">{ props.children }</div>)\n  <div className=\"card-list\">\n  {\n      props.monsters.map(monster => (\n        // must have unique key so that React can tell which element needs to be updated\n        <Card key={ monster.id } monster={ monster }/>\n      ))\n    }\n  </div>\n)};\n\nexport default CardList;\n","import React, { Fragment } from 'react';\nimport './search-box.styles.css';\n\n// function component\n// no access to internal state\n// no access to lifecycle methods\n// we just want to render some html\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <Fragment>\n      <label>Search</label>\n      <input\n        className=\"search\"\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </Fragment>\n  )\n};\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops! Something went wrong.</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/card-list/card-list.component';\nimport { SearchBox } from '../components/search-box/search-box.component';\nimport Scroll from '../components/scroll/scroll';\nimport ErrorBoundary from '../components/error-boundary/error-boundary';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n};\n\n// function that takes an event and it dispatch that event to the action\nconst mapDispatchToProps = dispatch => {\n  return {\n    // action we want to target is setSearchField\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n};\n\n// if we don't import Component, we can use class App extends React.Component\nclass App extends Component {\n  // constructor() {\n    // call super on Component to get state\n    // super extends component method onto App class\n    // super();\n\n    // this.state = {\n    //   monsters: [],\n    //   searchField: ''\n    // };\n    // cannot update state with this.state = something\n    // must use this.setState() to update state\n\n    // bind this to handleChange\n    // this.handleChange = this.handleChange.bind(this);\n  // }\n\n  componentDidMount() {\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //     .then(response => response.json())\n  //     .then(users => this.setState({ monsters: users }));\n    this.props.onRequestRobots();\n  }\n\n  // arrow function auto bind this to App Class or when handleChange was first defined\n  // lexical scoping - lexically scope this to when method was first defined which is App component\n  // handleChange = (e) => {\n  //   this.setState({ searchField: e.target.value });\n  // }\n\n  // available through Component\n  render() {\n    // destructuring\n    // pulling monsters and searchField from state and setting it to a const\n    // const { monsters } = this.state;\n    // connect passes in searchField from mapStateToProps\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredMonsters = robots.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return isPending ?\n      <h1>Loading...</h1> :\n      (\n        <div className=\"App\">\n          <h1>Monster Dex</h1>\n          <SearchBox\n            placeholder='search monsters'\n            handleChange={onSearchChange}\n          />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList monsters={filteredMonsters} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n// \nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, error: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialState = {\n  searchField: ''\n};\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false,\n  error: ''\n};\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.error, isPending: false });\n    default:\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// jsx blueprint\nimport React from 'react';\n// robot that updates the dom like dynamicbrowsermodule\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}